---
- name: Download JBCS patch from RHN using JBoss Network API
  delegate_to: localhost
  run_once: true
  when:
    - not jbcs_offline_install
    - rhn_username is defined and rhn_password is defined
  block:
    - name: Retrieve product download using JBoss Network API
      middleware_automation.common.product_search:
        client_id: "{{ rhn_username }}"
        client_secret: "{{ rhn_password }}"
        product_type: SECURITY
        product_version: "{{ jbcs_version.split('-')[0] }}"
        product_category: "core.service.apachehttp"
      register: rhn_products
      delegate_to: localhost
      run_once: true

    - name: Determine patch zipfiles from search results
      ansible.builtin.set_fact:
        rhn_filtered_products: "{{ rhn_products.results | map(attribute='file_path') | \
                                   select('match', '^[^/]*/' + jbcs_patch_bundle + '$') | \
                                   map('regex_replace', '[^/]*/' + jbcs_bundle_prefix + '-' + jbcs_version + '-SP([1-9][0-9]*)-.*', '\\1') | \
                                   list | unique }}"
      delegate_to: localhost
      run_once: true

    - name: Sort patch versions
      ansible.builtin.set_fact:
        latest_patch_version: "{{ 'SP' + (rhn_filtered_products | middleware_automation.common.version_sort | last) }}"
      delegate_to: localhost
      run_once: true

    - name: Determine latest patch version
      ansible.builtin.set_fact:
        rhn_filtered_products: "{{ rhn_products.results | selectattr('file_path', 'match', \
                                   '[^/]*/' + [ jbcs_bundle_prefix, jbcs_version, latest_patch_version, jbcs_distro, jbcs_arch ] | join('-') + '.zip$') }}"
      delegate_to: localhost
      run_once: true

    - name: Determine patch archive filename
      ansible.builtin.set_fact:
        jbcs_patch_bundle: "{{ (rhn_filtered_products | first).file_path | basename }}"
      delegate_to: localhost
      run_once: true

    - name: Download JBCS patch
      middleware_automation.common.product_download:
        client_id: "{{ rhn_username }}"
        client_secret: "{{ rhn_password }}"
        product_id: "{{ (rhn_filtered_products | first).id }}"
        dest: "{{ local_path.stat.path }}/{{ jbcs_patch_bundle }}"
      no_log: "{{ omit_rhn_output | default(true) }}"
      delegate_to: localhost
      run_once: true

- name: Use provided JBCS patch archive for offline install
  delegate_to: localhost
  when:
    - jbcs_offline_install
    - '"[1-9][0-9]" in jbcs_patch_bundle'
  block:

    - name: Initialize candidates list
      delegate_to: localhost
      ansible.builtin.set_fact:
        sp_archive_candidates: []

    - name: Find local SP archive(s)
      run_once: true
      with_fileglob:
        - "{{ local_path.stat.path }}/{{ jbcs_patch_bundle.replace('[1-9][0-9]', '') }}"
      ansible.builtin.set_fact:
        sp_archive_candidates: "{{ sp_archive_candidates + [item | basename] }}"
      delegate_to: localhost

    - name: Process candidates and pick the newest Service Pack
      delegate_to: localhost
      when: sp_archive_candidates | length > 0
      vars:
        jbcs_prefix: "{{ jbcs_bundle_prefix }}-{{ jbcs_version }}-SP"
        jbcs_sufix: "-{{ jbcs_distro }}-{{ jbcs_arch }}.zip"
      ansible.builtin.set_fact:
        newest_sp: "{{ sp_archive_candidates | \
                       map('replace', jbcs_prefix, '') | \
                       map('replace', jbcs_sufix, '')  | \
                       map('int') | sort | last }}"

    - name: "Use SP {{ newest_sp }}"
      when: newest_sp is defined
      ansible.builtin.set_fact:
        jbcs_patch_bundle: "{{ jbcs_bundle_prefix }}-{{ jbcs_version }}-SP{{ newest_sp }}-{{ jbcs_distro }}-{{ jbcs_arch }}.zip"

- name: Check local download archive
  ansible.builtin.stat:
    path: "{{ local_path.stat.path }}/{{ jbcs_patch_bundle }}"
  register: local_archive_path
  delegate_to: localhost

## check remote archive
- name: Set download archive path
  ansible.builtin.set_fact:
    archive: "{{ jbcs_zip_path }}/{{ jbcs_patch_bundle }}"

- name: Check download archive path
  become: true
  ansible.builtin.stat:
    path: "{{ archive }}"
  register: archive_path

## copy and unpack
- name: Copy archive to target nodes
  ansible.builtin.copy:
    src: "{{ local_path.stat.path }}/{{ jbcs_patch_bundle }}"
    dest: "{{ archive }}"
    owner: "{{ httpd.user.name }}"
    group: "{{ httpd.group.name }}"
    mode: '0640'
  register: new_version_downloaded
  when:
    - not archive_path.stat.exists
    - local_archive_path.stat is defined
    - local_archive_path.stat.exists
  become: true

- name: "Check target directory: {{ httpd.home }}"
  ansible.builtin.stat:
    path: "{{ httpd.home }}"
  register: path_to_workdir
  become: true

- name: Extract JBCS patch archive on target
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ archive }}"
    dest: /opt/jbcs/
    owner: "{{ httpd.user.name }}"
    group: "{{ httpd.group.name }}"
  become: true
  when:
    - new_version_downloaded.changed or path_to_workdir is not defined or not path_to_workdir.stat.exists
  notify:
    - Restart JBCS

- name: Inform decompression was not executed
  ansible.builtin.debug:
    msg: "{{ httpd.home }} already exists and version unchanged, skipping decompression"
  when:
    - not new_version_downloaded.changed
    - path_to_workdir is defined
    - path_to_workdir.stat.exists
