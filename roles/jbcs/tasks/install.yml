---
- name: "Check preconditions"
  ansible.builtin.assert:
    that:
      - httpd is defined
      - httpd.user is defined
      - httpd.user.name is defined
      - httpd.group is defined
      - httpd.group.name is defined
      - httpd.home is defined
    quiet: true

- name: Create group
  become: true
  ansible.builtin.group:
    name: "{{ httpd.group.name }}"
    state: present
    gid: "{{ httpd.group.id | default(omit) }}"
    system: true

- name: Create user
  become: true
  ansible.builtin.user:
    name: "{{ httpd.user.name }}"
    group: "{{ httpd.group.name }}"
    home: /opt/jbcs/
    state: present
    uid: "{{ httpd.user.id | default(omit) }}"
    system: true

- name: Create home directory
  ansible.builtin.file:
    path: /opt/jbcs/
    owner: "{{ httpd.user.name }}"
    group: "{{ httpd.group.name }}"
  changed_when: false

- name: Create directory for zipfile
  become: true
  ansible.builtin.file:
    path: "{{ jbcs_zip_path }}"
    owner: "{{ httpd.user.name }}"
    group: "{{ httpd.group.name }}"
    mode: 0750
    state: directory

## check remote archive
- name: Set download archive path
  ansible.builtin.set_fact:
    archive: "{{ jbcs_zip_path }}/{{ jbcs_bundle }}"

- name: Check download archive path
  become: yes
  ansible.builtin.stat:
    path: "{{ archive }}"
  register: archive_path

## download to controller
- name: Check local download archive path
  ansible.builtin.stat:
    path: "{{ lookup('env', 'PWD') }}"
  register: local_path
  delegate_to: localhost

- name: Check downloaded archive
  ansible.builtin.stat:
    path: "{{ local_path.stat.path }}/{{ jbcs_bundle }}"
  register: local_archive_path
  delegate_to: localhost

- name: Download JBCS from RHN using JBoss Network API
  delegate_to: localhost
  run_once: yes
  when:
    - not jbcs_installed is defined
    - archive_path is defined
    - archive_path.stat is defined
    - not archive_path.stat.exists
    - local_archive_path.stat is defined
    - not local_archive_path.stat.exists
    - not jbcs_offline_install
    - rhn_username is defined and rhn_password is defined
  block:
    - name: Retrieve product download using JBoss Network API
      middleware_automation.common.product_search:
        client_id: "{{ rhn_username }}"
        client_secret: "{{ rhn_password }}"
        product_type: DISTRIBUTION
        product_version: "{{ jbcs_version.split('-')[0] }}"
        product_category: "core.service.apachehttp"
      register: rhn_products
      delegate_to: localhost
      run_once: yes

    - name: Determine install zipfile from search results
      ansible.builtin.set_fact:
        rhn_filtered_products: "{{ rhn_products.results | selectattr('file_path', 'match', '.*/jbcs-httpd24-httpd-' + jbcs_version + '-' + jbcs_distro + '-' + jbcs_arch + '.zip') }}"
      delegate_to: localhost
      run_once: yes

    - name: Download JBCS
      middleware_automation.common.product_download:
        client_id: "{{ rhn_username }}"
        client_secret: "{{ rhn_password }}"
        product_id: "{{ (rhn_filtered_products | first).id }}"
        dest: "{{ local_path.stat.path }}/{{ jbcs_bundle }}"
      no_log: "{{ omit_rhn_output | default(true) }}"
      delegate_to: localhost
      run_once: yes

- name: Check downloaded archive
  ansible.builtin.stat:
    path: "{{ local_path.stat.path }}/{{ jbcs_bundle }}"
  register: local_archive_path
  delegate_to: localhost

## copy and unpack
- name: Copy archive to target nodes
  ansible.builtin.copy:
    src: "{{ local_path.stat.path }}/{{ jbcs_bundle }}"
    dest: "{{ archive }}"
    owner: "{{ httpd.user.name }}"
    group: "{{ httpd.group.name }}"
    mode: 0640
  register: new_version_downloaded
  when:
    - not archive_path.stat.exists
    - local_archive_path.stat is defined
    - local_archive_path.stat.exists
  become: yes

- name: "Check target directory: {{ httpd.home }}"
  ansible.builtin.stat:
    path: "{{ httpd.home }}"
  register: path_to_workdir
  become: yes

- name: Extract JBCS archive on target
  ansible.builtin.unarchive:
    remote_src: yes
    src: "{{ archive }}"
    dest: /opt/jbcs/
    creates: "{{ httpd.home }}"
    owner: "{{ httpd.user.name }}"
    group: "{{ httpd.group.name }}"
  become: yes
  when:
    - new_version_downloaded.changed or not path_to_workdir.stat.exists
  notify:
    - Restart JBCS

- name: Inform decompression was not executed
  ansible.builtin.debug:
    msg: "{{ httpd.home }} already exists and version unchanged, skipping decompression"
  when:
    - not new_version_downloaded.changed and path_to_workdir.stat.exists

- name: Post install HTTPD
  become: yes
  ansible.builtin.template:
    src: templates/jbcs-httpd24-httpd.service.j2
    dest: "/usr/lib/systemd/system/{{ jbcs_service_name }}.service"
    owner: "{{ httpd.user.name }}"
    group: "{{ httpd.group.name }}"
    mode: 0640
  notify:
    - "Reload systemd"

- name: Ensure JBCS configuration is correct
  become: yes
  notify:
    - "Restart JBCS"
  loop:
    - name: 00-base.conf
      dest: "{{ httpd.home }}/httpd/conf.modules.d"
    - name: httpd.conf
      dest:  "{{ httpd.home }}/httpd/conf"
  ansible.builtin.template:
    src: "templates/{{ item.name }}.j2"
    dest: "{{ item.dest }}/{{ item.name }}"
    owner: "{{ httpd.user.name }}"
    group: "{{ httpd.group.name }}"
    mode: 0640

- name: Ensure JBCS module configuration is correct
  become: yes
  ansible.builtin.command: "mv {{ item }} {{ item }}.bak"
  args:
    removes: "{{ item }}"
    creates: "{{ item }}.bak"
    chdir: "{{ httpd.home }}/httpd/conf.d/"
  failed_when: false
  changed_when: false
  loop:
    - manual.conf
    - welcome.conf
